Global DNS Left-Right Range Resolve(LRRR)



LRRR(L3R) is designed to solve such a problem: How to resolve a dns domain name globally to the ip of server most near to user without a geoip db?


The issue is that there are some diffcults in geoip based name resolving:
1.Do you have a geoip db? Yes, GeoIP is freely available. But a DNS server supporting GeoIP resolve? Yes, Geodns. But for BIND only.
2.GeoIP db needs update frequently, and reload dns service.
3.Some user very near to you, have complex network env. For example: a HK user may access your server in US much faster than your server in mainland china. 
  Don't ask me why. So, GeoIP based name resolving may not correct in some special cases.


A RTT(Round-Trip-Time) based name resolving method called Left-Right Range Resolve(LRRR)
 using by 3nsd, can solve the problems above. For:
1.RTT was the 'real' distance in network world comparing to geo location.
2.Not requiring a geoip db, and reloading of dns service.



The Left-Right Range Resolve(LRRR)
 diagram:
            c
  left--------------right
    \              /
     \           /
     a\        /b
       \      /
        \   /
          P

The theory:

DNS server(left & right), was deployed at two far-enough location.
User P, querying a domain name, will be checked by both left and right side. To get a RTT named a & b.
If a>b, P is near to right side. IP corresponding to right side is returned.
If a<b, P is near to left side.IP corresponding to left side is returned.
If a=b, P is at the middle.  IP corresponding to middle is returned.

We can set up a serve distance of left&right side, let's say: 80ms. Beyond that, served by the far-left&far-right side.

                        c
far-left------left--------------right------far-right
               /                /
            /           /
        a/       /b
       /    /         
     /  /                
    P

In my test case:
left = US west
right = US east
far-left = Hong Kong
far-right = Frankfut

Which cover the US(west/east), Asia, and Europe. Also can serve Africa and South America.


Let's start with an example:

dig ga.i.3xsd.net @8.8.8.8  has output like:

ga.i.3xsd.net.          15      IN      CNAME   lr-3074231728-1462456334-0-0.ga.r.3xsd.net.
lr-3074231728-1462456334-0-0.ga.r.3xsd.net. 15 IN CNAME lr-3074231728-1462456334-0-302351.ga.r.3xsd.net.
lr-3074231728-1462456334-0-302351.ga.r.3xsd.net. 15 IN CNAME lr-3074231728-1462456334-0-253.ga.l.3xsd.net.
lr-3074231728-1462456334-0-253.ga.l.3xsd.net. 15 IN CNAME lr-3074231728-1462456334-304616-253.ga.l.3xsd.net.
lr-3074231728-1462456334-304616-253.ga.l.3xsd.net. 15 IN CNAME lr-3074231728-1462456334-166-253.ga.l.3xsd.net.
lr-3074231728-1462456334-166-253.ga.l.3xsd.net. 15 IN CNAME ga.l.3xsd.net.
ga.l.3xsd.net.          15      IN      A       69.12.73.123


query_name: ga.i.3xsd.net
cname: prefix-ip-ts0-ts1-ts2.ga.l.3xsd.net
prefix:prefix identifying a L3R check
ip:query peer's ip in 32bit int
ts0: base time, in secs
ts1: a measure time start point if ts2 = 0, or rtt of a if ts2 > 0, in msecs from base time
ts2: b measure time start point if ts3 = 0, or rtt of b if ts3 > 0, in msecs from base time

After pings&pongs between left and right side, at last a & b returned:

  lr-3074231728-1462456334-166-253.ga.l.3xsd.net.

means left rtt=166, right rtt=253, we should choose left side.


As you can see, L3R has some side-effects, one of them is the first query would take a long time(typically 1.0 - 2.5sec).
A cache will help accelerating the query following.







